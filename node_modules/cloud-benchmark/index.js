var request = require('request');
var MongoClient = require('mongodb').MongoClient;
var elasticSearch = require('elasticSearch');
// var sleep = require('sleep');

var cloudDB;
var clouds = []; // clouds array to hold endpoints for all instances to test
var routes = []; // routes array to hold routes to test
var interval;
var number_of_trials;
var block = 0;
var global_arr;

exports.clouds = clouds;
exports.routes = routes;

var client = new elasticSearch.Client({
    host: 'search-candidates-cjppiuv3s4xsksv4prai7gcohm.us-west-2.es.amazonaws.com',
    log: 'trace'
});
// client.indices.create({ // create index
//     index: 'routes',
//     body: {
//     }
// });


// clouds setter method to add endpoints
// url is only the route after initial /
exports.insertCloud = function(url) {
    clouds.push(url);
    // insert to MongoDB
    // Connect to the db
}

exports.removeCloud = function(url) {
    var index = clouds.indexOf(url);
    clouds.splice(index, 1);

    // remove from MongoDB
}

exports.printClouds = function() {
    console.log(clouds);
}

exports.addRoute = function testRoute(method, url, parameters) {
    var new_route;
    if(parameters){
        new_route = [method, url, parameters];
    } else {
        new_route = [method, url]
    }
    routes.push(new_route);
    // insert new_route into MongoDB
}

exports.removeRoute = function(url) {
    var index = routes.indexOf(url);
    routes.splice(index, 1);
}

exports.printRoutes = function() {
    console.log(routes);
}

exports.interval = function(interval_in_hrs) {
    // convert new_interval from hours to seconds
    interval = interval_in_hrs * 60 * 60;
    // convert from seconds to ms
    interval = interval * 1000;
    console.log(interval);
}

function createArray() {
    var local_arr = new Array();
    for(var i = 0; i < routes.length; i++) {
        var method = routes[i][0];
        console.log(method);
        for(var j = 0; j < clouds.length; j++) {
            local_arr.push([routes[i], clouds[j]]);
        }
    }
    global_arr = local_arr;
}
exports.number_of_trials = function(numTrials) {
    number_of_trials = numTrials;
    console.log("Number of trials " + number_of_trials);
}

// assume array holds all pairs
function benchmark(arr, hour) {
    if(arr.length == 0) {}
    else {
    // send request and start timer
    var pair = arr.pop();
    console.log(pair);
        var method = pair[0][0];
        var url = pair[1];
        var route = pair[0][1];
        url = url + route;
        if(method == "GET") {
            var start = Date.now();   //start timer
            request(url, function (error, response, body) {
                var end = Date.now();
                var response_time = end-start;
                client.update({
                    index: 'routes',
                    type: 'route',
                    body: {
                        route: route,
                        cloud: url,
                        time_of_day: hour,
                        response_time: response_time
                    }
                }, function (error, response) {
                    console.log(response);
                });
                console.log(method + " Response Time: " + response_time + " msec");
                benchmark(arr);
            });
        }
        else if(method == "POST") {
            var parameters = pair[0][2];
            var start = Date.now();   //start timer
            request({
                url: url,
                method: 'POST',
                form: parameters
            }, function(error, response, body){
                end = Date.now();
                var response_time = end-start;
                client.create({
                    index: 'routes',
                    type: 'route',
                    body: {
                        route: route,
                        cloud: url,
                        time_of_day: hour,
                        response_time: response_time
                    }
                }, function (error, response) {
                    console.log(response);
                });
                console.log(method + " Response Time: " + response_time + " msec");
                benchmark(arr);
            });
        }
    }
}

function doBenchmark() {
    var timeNow = new Date();
    var hour = timeNow.getHours();
    for(int i = 0; i < interval; i++) {
        benchmark(global_arr, hour);
    }
}

exports.startBenchmark = function() {
    createArray();
    interval = 2000;
    setInterval(doBenchmark, interval);
}

// method to test routes
// exports.testRoute = function testRoute(method, url, parameters) {
//     console.log("test");
//
//     for(var i = 0; i < clouds.length; i++) {
//         console.log(clouds[i]);
//         //start timer
//         var start = Date.now();
//         // console.time("cloud-request");
//         //send request to instance
//         if(method == "GET") {
//             request
//                 .get(clouds[i])
//                 .on('response', function(response) {
//                     //stop timer
//                     var end = Date.now();
//                     var time = end-start;
//                     console.log(time + " msec");
//
//                     // store time in MongoDB
//
//                     console.log("Response");
//             });
//         }
//         // TODO
//         if(method == "POST") {
//
//         }
//     }
// }
